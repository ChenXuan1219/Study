函数式编程
1.没有变量,都是常量
2.每一段程序都有一个返回值
3.做映射关系

函数
1.无参,又返回值
2.无参,有返回值
3.有参,无返回值
4.有参,有返回值
5.多参,无返回值
6.多参,有返回值


函数参数:
1.可变参数
2.如果参数列表,可变参数放在最后
3.参数默认值,一般将有默认值的参数放置在列表的后面
4.带名参数 可以打乱顺序输入参数值

函数简化
1.return可以省略
2.函数只有一行内容,{}可以省略
3.返回值类型如果能推断出来,那么可以省略
4.如果有return,则不能省略返回值类型,必须指定
5.如果函数声明Unit,即使函数体中使用return也是Unit
6.如果函数是无返回值类型,可以省略等号
7.如果函数无参,但是声明了参数列表,调用时,小括号,可以不加
8.如果函数没有参数列表,那么小括号可以省略,调用时,小括号必须省略
9.如果不关心名称,只关心逻辑处理,那么函数名def可以省略===>匿名函数,Lambda表达式


匿名函数的简化原则
1.参数的类型可以省略,会根据形参进行自动的推到
2.类型省略之后,发现只有一个参数,则圆括号可以省略,其他情况,没有参数和参数超过1的永远不能省略圆括号
3.匿名函数如果只有一行,大括号可以省略
4.如果参数只会出现一次,则参数省略且后面参数可以用_替代

函数的高阶用法
1.函数可以作为值传递
有参
def f6(age: Int): Int = {
      age
    }

val fun: Int=>Int = f6

无参
def f7(): Unit ={
      println("f7")
    }
val fun1 = f7 _
println(fun1)

2.函数可以作为参数作为传递
    def dealEval(op: (Int,Int)=>Int ,a: Int, b: Int): Int = {
      op(a,b)
    }

    def add(a: Int,b: Int): Int = {
      a + b
    }

    println(dealEval(add,12,35))
    println(dealEval((a , b)=> a + b , 12, 35))
    println(dealEval(_ + _,12,35))
  }

3.函数可以作为函数的返回值返回
def f5(): Int=>Unit = {
      f6
    }

def f6(a:Int):Unit={
      println("f6调用")
    }

println(f5()(25))



函数的柯里化&闭包
闭包:如果一个函数,访问到了他的外部(局部)变量的值,那么这个函数和他所处的环境,成为闭包
函数柯里化:把一个参数列表的多个参数,变成多个参数列表


递归
自身调用自身