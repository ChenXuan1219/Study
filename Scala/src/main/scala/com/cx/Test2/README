Test01
一.变量和常量
(1)声明变量的时候,类型可以省略,编译自动推导
变量 var i : Int = 10
常量 val j : String = "cx"
能用常量不用变量,方便函数式编程

(2)类型确定后,就不能修改,因为scala是强类型语言

(3)变量声明时,必须要有初始值

(4)声明/定义一个变量时,可以使用var和val来修饰,var可改值,val确定值不能更改


Test03
二.变量规范
(1)以关键字为变量名,需要用``;
var `class` : Int = 5;

Test04
三.String
(1) 通过 + 来拼接,*用于将一个字符串复制多次拼接
val a = "pink"
val b = "man"
val c3 = a + b
val c2 = a * 3

(2) printf: 字符串,通过%传值
printf("%s的后缀为%s",a,b)

(3)字符串模板:通过$获取变量值 s
注意:需要在""前加s
println(s"${c}的后缀为${b}")

(4)格式化模板字符串 f
 val num = 2.3456
 val number = 1
 println(f"${num}%2.2f .... $number%2.2f")

 result : 2.35 .... 1.00

(5)三引号表示字符串,保持多行字符串的原格式输出
比如sql,多行显示的时候,需要换行
直接s"""
    val sql = s"""
       |select *
       |from
       |  user
       |where
       |  name = ${a}
       |""".stripMargin


Test05
键盘输入
导入import scala.io.StdIn
    val name: String = StdIn.readLine()

Test06
读取文件
导入import scala.io.Source类
    Source.fromFile("src/main/scala/README").foreach(print)

写入文件
import java.io.{File, PrintWriter}
    val writer = new PrintWriter(new File("src/main/scala/Test2/Test1.txt"))
    writer.write("chen")
    writer.close()


Test07
数据类型
(1)scala中一切数据都是对象,都是Any的子类
(2)scala中数据类型分为两类:数值类型AnyVal 引用类型AnyRef,两者都是对象
(3)Scala遵守低精度向高精度转换
(4)Scala中的StringOps是Java中的String增强
(5)Unit:对应void,是一个数据类型,只有一个对象().Void不是数据类型,是关键字
(6)Null是一个类型,只有一个对象为null,他是所有引用类型(AnyRef)的子类
(7)Nothing是所有数据类型的子类,主要用在一个函数没有明确返回值时使用,因为这样我们可以把抛出的返回值,返回给任何的变量或函数
Any
 |-->AnyVal
    |-->Double
    |-->Float
    |-->Long
    |-->Int
    |-->Short
    |-->Byte
    |-->Unit:对应void,是一个数据类型,只有一个对象实例().   空值
    |-->StringOps
    |-->Char 类型转换为 Int
    |-->Boolean
 |-->AnyRef
    |-->
    |-->
    |-->

NULL 空引用
 |-->实例值:null

Nothing 什么都没有,无值也无返回值.
 |-->nothing


整数类型
Byte :1byte :-128~127
Short:2byte :
Int  :4byte :
Long :8byte :

整数默认为Int
改为Long的话 val a = 100000000L  or val a : Long = 10000000L
改为Byte    val a = (a + 10).toByte


浮点类型
默认为Double
float类型需要  vla a : float = 1.232f



类型转换
Byte-->Short-->Int-->Long-->Float-->Double
Char-->Int 只能转换为Int


强转溢出
128 Int 占4个字节  32位
原码0000 0000 0000 0000 0000 0000 1000 0000
补码0000 0000 0000 0000 0000 0000 1000 0000
截取最后一个字节,Byte
得到补码1000 0000
表示最大负数-128





